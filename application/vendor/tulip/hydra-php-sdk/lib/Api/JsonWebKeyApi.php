<?php
/**
 * JsonWebKeyApi
 * PHP version 5
 *
 * @category Class
 * @package  Hydra\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hydra\SDK\Api;

use \Hydra\SDK\ApiClient;
use \Hydra\SDK\ApiException;
use \Hydra\SDK\Configuration;
use \Hydra\SDK\ObjectSerializer;

/**
 * JsonWebKeyApi Class Doc Comment
 *
 * @category Class
 * @package  Hydra\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JsonWebKeyApi
{
    /**
     * API Client
     *
     * @var \Hydra\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Hydra\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Hydra\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Hydra\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Hydra\SDK\ApiClient $apiClient set the API client
     *
     * @return JsonWebKeyApi
     */
    public function setApiClient(\Hydra\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createJsonWebKeySet
     *
     * Generate a new JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKeySetGeneratorRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKeySet
     */
    public function createJsonWebKeySet($set, $body = null)
    {
        list($response) = $this->createJsonWebKeySetWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation createJsonWebKeySetWithHttpInfo
     *
     * Generate a new JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKeySetGeneratorRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJsonWebKeySetWithHttpInfo($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling createJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKey
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteJsonWebKey($kid, $set)
    {
        list($response) = $this->deleteJsonWebKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation deleteJsonWebKeyWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeyWithHttpInfo($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling deleteJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/keys/{set}/{kid}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeySet
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteJsonWebKeySet($set)
    {
        list($response) = $this->deleteJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation deleteJsonWebKeySetWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeySetWithHttpInfo($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/keys/{set}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJsonWebKey
     *
     * Retrieve a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKeySet
     */
    public function getJsonWebKey($kid, $set)
    {
        list($response) = $this->getJsonWebKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation getJsonWebKeyWithHttpInfo
     *
     * Retrieve a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeyWithHttpInfo($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling getJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKeySet',
                '/keys/{set}/{kid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeySet
     *
     * Retrieve a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKeySet
     */
    public function getJsonWebKeySet($set)
    {
        list($response) = $this->getJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation getJsonWebKeySetWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeySetWithHttpInfo($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKey
     *
     * Update a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKey $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKey
     */
    public function updateJsonWebKey($kid, $set, $body = null)
    {
        list($response) = $this->updateJsonWebKeyWithHttpInfo($kid, $set, $body);
        return $response;
    }

    /**
     * Operation updateJsonWebKeyWithHttpInfo
     *
     * Update a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKey $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeyWithHttpInfo($kid, $set, $body = null)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling updateJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKey',
                '/keys/{set}/{kid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKey', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKeySet
     *
     * Update a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKeySet $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKeySet
     */
    public function updateJsonWebKeySet($set, $body = null)
    {
        list($response) = $this->updateJsonWebKeySetWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation updateJsonWebKeySetWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \Hydra\SDK\Model\JsonWebKeySet $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeySetWithHttpInfo($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
